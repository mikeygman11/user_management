name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16.2
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: myappdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U user -d myappdb"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DATABASE_URL: postgresql+asyncpg://user:password@localhost:5432/myappdb
      SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
      SMTP_PORT: ${{ secrets.SMTP_PORT }}
      SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
      SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install alembic pytest pytest-cov pylint

      - name: Wait for PostgreSQL to be ready
        run: until pg_isready -h localhost -U user -d myappdb; do sleep 1; done

      - name: Run Alembic migrations
        env:
          DATABASE_URL: postgresql://user:password@localhost:5432/myappdb
        run: alembic upgrade head

      - name: Run pylint
        run: pylint app tests

      - name: Run tests with coverage
        run: pytest --cov=app --cov-report=term-missing

  build-and-push-docker:
    needs: test
    runs-on: ubuntu-latest
    environment: production

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: mikeygman11/user_management:${{ github.sha }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=registry,ref=mikeygman11/user_management:cache
          cache-to: type=inline

      - name: Scan Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'mikeygman11/user_management:${{ github.sha }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
